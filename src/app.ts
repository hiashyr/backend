import "dotenv/config";
import express from "express";
import { AppDataSource } from "./config/data-source";
import cors from "cors";
import userRoutes from "./routes/userRoutes";
import authRoutes from "./routes/authRoutes";
import examRoutes from './routes/exam.routes';
import questionRoutes from './routes/question.routes'; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç
import topicRoutes from './routes/topic.routes'; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import hardModeRoutes from './routes/hard-mode.routes';
import adminRoutes from './routes/admin.routes'; // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω —Ä–æ—É—Ç
import theoryRuleRoutes from './routes/theoryRule.routes';
import theoryTopicRoutes from './routes/theoryTopic.routes';
import theoryPointRoutes from './routes/theoryPoint.routes';
import path from "path";
import fs from "fs"; // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫

const app = express();
const PORT = process.env.PORT;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.JWT_SECRET || !process.env.FRONTEND_URL) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env");
  process.exit(1);
}

// Middleware
app.use(cors({
  origin: (process.env.FRONTEND_URL || '').split(',').map(url => url.trim()),
  credentials: true
}));
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const uploadDirs = [
  path.join(__dirname, '../uploads/avatars'),
  path.join(__dirname, '../uploads/questions')
];

uploadDirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/api/uploads/avatars', express.static(uploadDirs[0]));
app.use('/api/uploads/questions', express.static(uploadDirs[1]));
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
  next();
});

// –†–æ—É—Ç—ã
app.use("/api/users", userRoutes);
app.use("/api/auth", authRoutes);
app.use("/api/exam", examRoutes);
app.use("/api/questions", questionRoutes);
app.use("/api/topics", topicRoutes);
app.use("/api/tests/hard-mode", hardModeRoutes);
app.use("/api/admin", adminRoutes); // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω —Ä–æ—É—Ç
app.use("/api/theory-rules", theoryRuleRoutes);
app.use("/api/theory-topics", theoryTopicRoutes);
app.use("/api/theory-points", theoryPointRoutes);

// Health check
app.get("/", (req, res) => {
  res.json({
    status: "OK",
    message: "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç",
    uploads: {
      avatars: "/uploads/avatars",
      questions: "/uploads/questions"
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
AppDataSource.initialize()
  .then(() => {
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìÅ –ü–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Å–æ–∑–¥–∞–Ω—ã: ${uploadDirs.join(', ')}`);
    });
  })
  .catch(error => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", error);
    process.exit(1);
  });
